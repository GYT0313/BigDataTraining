# broker, 列表
bootstrap.servers=gp-guyt-1:9092,gp-guyt-2:9092,gp-guyt-3:9092

## zookeeper
#zk.connect=gp-guyt-1:2181,gp-guyt-2:2181,gp-guyt-3:2181
#用来控制一个produce请求怎样才能算完成，准确的说，是有多少broker必须已经提交数据到log文件，并向leader发送ack，可以设置如下的值：
#0，意味着producer永远不会等待一个来自broker的ack，这就是0.7版本的行为。这个选项提供了最低的延迟，但是持久化的保证是最弱的，当server挂掉的时候会丢失一些数据。
#1，意味着在leader replica已经接收到数据后，producer会得到一个ack。这个选项提供了更好的持久性，因为在server确认请求成功处理后，client才会返回。如果刚写到leader上，还没来得及复制leader就挂了，那么消息才可能会丢失。
#-1，意味着在所有的ISR都接收到数据后，producer才得到一个ack。这个选项提供了最好的持久性，只要还有一个replica存活，那么数据就不会丢失。
#默认值  为 0
#request.required.acks=1

# 请求超时时间     默认为 10000
request.timeout.ms=60000

#决定消息是否应在一个后台线程异步发送。
#合法的值为sync，表示异步发送；sync表示同步发送。
#设置为async则允许批量发送请求，这回带来更高的吞吐量，但是client的机器挂了的话会丢失还没有发送的数据。
#默认值为 sync
#producer.type=sync

# 设置序列化（自带的StringSerializer，如果消息的值为对象，就需要使用其他序列化方式，如Avro ）
key.serializer=org.apache.kafka.common.serialization.StringSerializer
value.serializer=org.apache.kafka.common.serialization.StringSerializer